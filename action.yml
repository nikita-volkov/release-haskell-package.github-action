name: Release a Haskell package repository

description:
  Perform automatic version management and publish a package on Hackage.

inputs:

  hackage-token:
    description: |
      Authentication token for Hackage. You can generate it at [your Hackage account management page](http://hackage.haskell.org/users/account-management) and provide it via Github Actions Secrets.
    required: true

  version-bump-place:
    description: |
      Index of the bumped version place.

      E.g., `2` points to `x` in `0.1.x.0`.

      To determine the place from a branch name you can use the following expression:

      ```
      fromJSON('{"supermajor":0,"major":1,"minor":2,"patch":3}')[github.ref_name]
      ```
    required: true

  main-branch:
    description:
      The name of your main branch to merge the version changes to. E.g., "main" or "master". Defaults to "main".
    default: main

  prefix-tag-with-v:
    description:
      Whether to prefix the tag with "v". E.g., `v1.2.3` vs `1.2.3`.
    default: true
  
  docs:
    description:
      Whether to generate the docs.
    default: false

runs:
  using: composite
  steps:
    - name: Pull
      shell: bash
      run: git pull

    - name: Bump package version
      uses: nikita-volkov/edit-cabal-version.github-action@v1.1.1
      with:
        mode: bump
        bump-place: ${{ inputs.version-bump-place }}
      id: bump-cabal-version

    - name: Ensure no according tag exists
      uses: nikita-volkov/fail-if-tag-exists.github-action@v1.0.0
      with:
        tag: ${{ inputs.prefix-tag-with-v == 'true' && 'v' || '' }}${{ steps.bump-cabal-version.outputs.after }}

    - name: Generate package dist
      shell: bash
      run: cabal sdist

    - name: Generate Haddock
      if: ${{ inputs.docs }}
      shell: bash
      # We're doing it in such a complicated way to work around a bug in Cabal,
      # due to which it may generate documentation dist only for the internal libs,
      # if the name of the package is not specified thus:
      # `cabal haddock --haddock-for-hackage $package_name`. 
      run: |
        cabal_file=$(find . -maxdepth 1 -name "*.cabal" -print -quit)
        if [ ! -f "$cabal_file" ]; then
          echo "Cabal-file not found"
          exit 1
        fi
        
        package_name=$(awk -F ":[[:space:]]*" 'tolower($1)=="name"    { print $2 }' < "$cabal_file")
        if [ -z "$package_name" ]; then
          echo "Unable to determine package name"
          exit 1
        fi
        
        echo "Determined package name: $package_name"
        
        cabal update
        file=`cabal haddock --haddock-for-hackage $package_name | tail -1`
        echo "file=${file}" >> "${GITHUB_OUTPUT}"

    - name: Publish on Hackage
      uses: haskell-actions/hackage-publish@v1.1
      with:
        hackageToken: ${{ inputs.hackage-token }}
        publish: true
        docsPath: dist-newstyle

    - name: Commit the version update
      uses: stefanzweifel/git-auto-commit-action@v5
      with:
        commit_message: Set package version to ${{ steps.bump-cabal-version.outputs.after }}
        file_pattern: |
          *.cabal
      id: commit

    - name: Tag
      uses: mathieudutour/github-tag-action@v6.1
      with:
        github_token: ${{ github.token }}
        custom_tag: ${{ steps.bump-cabal-version.outputs.after }}
        tag_prefix: ${{ inputs.prefix-tag-with-v == 'true' && 'v' || '' }}
        commit_sha: ${{ steps.commit.outputs.commit_hash }}

    - name: Merge to master
      uses: devmasx/merge-branch@1.4.0
      with:
        type: now
        from_branch: ${{ github.ref_name }}
        target_branch: ${{ inputs.main-branch }}
        github_token: ${{ github.token }}
